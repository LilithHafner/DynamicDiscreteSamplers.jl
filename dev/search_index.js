var documenterSearchIndex = {"docs":
[{"location":"#WeightVectors","page":"Home","title":"WeightVectors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for WeightVectors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#WeightVectors.FixedSizeWeightVector","page":"Home","title":"WeightVectors.FixedSizeWeightVector","text":"FixedSizeWeightVector <: Weights\n\nAn object that confomrs the the Weights interface and cannot be resized.\n\n\n\n\n\n","category":"type"},{"location":"#WeightVectors.SemiResizableWeightVector","page":"Home","title":"WeightVectors.SemiResizableWeightVector","text":"SemiResizableWeightVector <: Weights\n\nAn object that confomrs the the Weights interface and can be resized, but only to sizes at most as large as it's original size.\n\n\n\n\n\n","category":"type"},{"location":"#WeightVectors.WeightVector","page":"Home","title":"WeightVectors.WeightVector","text":"WeightVector <: Weights\n\nAn object that confomrs the the Weights interface and can be resized.\n\n\n\n\n\n","category":"type"},{"location":"#WeightVectors.Weights","page":"Home","title":"WeightVectors.Weights","text":"Weights <: AbstractVector{Float64}\n\nAn abstract vector capable of storing normal, non-negative floating point numbers on which rand samples an index according to values rather than sampling a value uniformly.\n\n\n\n\n\n","category":"type"},{"location":"#WeightVectors._resize!-Tuple{WeightVector, Integer}","page":"Home","title":"WeightVectors._resize!","text":"Reallocate w with the size len, compacting w into that new memory. Any elements if w past len must be set to zero already (that's a general invariant for Weights, though, not just this function).\n\n\n\n\n\n","category":"method"},{"location":"#WeightVectors.binomial_sample-NTuple{4, Any}","page":"Home","title":"WeightVectors.binomial_sample","text":"binomial_sample(rng, trials, px, py)\n\nFlip a coin with probability of px//py of coming up heads trials times and return the number of heads.\n\nHas O(trials) expected runtime with a very low constant factor.\n\nImplementation based on Farach-Colton, M. and Tsai, M.T., 2015. Exact sublinear binomial sampling.\n\n\n\n\n\n","category":"method"},{"location":"#WeightVectors.binomial_sample_fair_coin-Tuple{Any, Any}","page":"Home","title":"WeightVectors.binomial_sample_fair_coin","text":"binomial_sample_fair_coin(rng, trials)\n\nFlips trials fair coins and reports the number of heads.\n\nFlips up to 64 coins at a time.\n\n\n\n\n\n","category":"method"},{"location":"#WeightVectors.initialize_empty-Tuple{Int64}","page":"Home","title":"WeightVectors.initialize_empty","text":"initialize_empty(len::Int)::Memory{UInt64}\n\nInitialize a Memory that, when underlaying a Weights object, represents len zeros.\n\n\n\n\n\n","category":"method"},{"location":"#WeightVectors.multinomial_sample-Tuple{Any, Any, AbstractVector{<:Integer}}","page":"Home","title":"WeightVectors.multinomial_sample","text":"multinomial_sample(rng, trials, weights)\n\nDraw trials elements from the probability distribution specified by weights (need not sum to 1) and return the number of times each element was drawn.\n\nRuns in O(trials * weights), but can be as fast as O(trials) if the weights are skewed toward big weights at the beginning.\n\n\n\n\n\n","category":"method"}]
}
